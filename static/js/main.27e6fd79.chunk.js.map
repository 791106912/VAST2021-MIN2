{"version":3,"sources":["firstQ/data.js","firstQ/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["timeArr","storeClassify","type","data","timeClassifyData","name","FirstQ","height","width","radiusArr","anagleScale","scaleLinear","domain","range","dayScale","extent","dayStr","useState","showTrack","setshowTrack","selectMode","setselectMode","pushOrPop","arr","d","newArr","includes","filter","d1","push","timeScale","map","moment","unix","Math","PI","consumePath","arc","innerRadius","day","outerRadius","length","startAngle","time","endAngle","originCCdata","setOriginCCdata","activeStore","setActiveStore","activeClassify","setActiveClassify","activeCustom","setActiveCustom","consumeData","useMemo","location","last4ccnum","ccNumData","setccNumData","priceOpacity","extents","Number","price","useEffect","cc","Promise","resolve","csv","then","res","console","log","newConsumeData","timestamp","split","dayStrs","hourStr","hour","newLoy","chain","uniq","value","loy","all","locationPriceObj","reduce","obj","num","newNum","parseFloat","toFixed","locationOpacity","Object","values","storeArr","flatten","storeClassifyScale","storeClassifyPath","index","findIndex","count","slice","padAngle","cornerRadius","storePath","indexOf","timePath","middleArcLine","angles","r1","max","middleAngle","invertDirection","reverse","pathFun","path","toString","colorScale","scaleOrdinal","sort","ascending","schemeCategory10","pointObj","thisData","key","centroid","activeTimeData","replace","trackPath","line","x","y","curve","curveCatmullRom","alpha","weekDay","className","transform","i","text","format","textOpactiy","opacity","cx","cy","r","attr","x1","y1","x2","y2","dy","textPathHrefProps","fill","id","textPathProps","href","startOffset","dominantBaseline","storeType","find","fillOpacity","JSON","stringify","stroke","intersection","onClick","newActiveClassisy","newActiveStore","j","newType","d2","theta","sqrt","cos","sin","newActiveScatter","entries","htmlFor","checked","onChange","Parallel","realHeight","bgRef","useRef","pathRef","scaleObj","scalePoint","xScale","keys","select","current","selectAll","remove","enter","append","classed","each","axis","axisLeft","scale","this","call","calLine","ref","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4YAAaA,EAAU,CACnB,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,YAESC,EAAgB,CACzB,CACIC,KAAM,aACNC,KAAM,CACF,sBACA,mBACA,kBACA,eACA,uBACA,uBACA,oBACA,gBACA,eACA,eACA,kBACA,cACA,gBACA,gBAGR,CACID,KAAM,SACNC,KAAM,CACF,gBACA,sBACA,yBACA,wBACA,kBACA,4BACA,gBACA,eACA,6BACA,iCAGR,CACID,KAAM,OACNC,KAAM,CACF,yBACA,cACA,cACA,oBACA,kBAGR,CACID,KAAM,gBACNC,KAAM,CACF,sBACA,qBAGR,CACID,KAAM,QACNC,KAAM,CACF,SACA,iBACA,+BAKCC,EAAmB,CAC5B,CACID,KAAM,EAAE,EAAG,GACXE,KAAM,YAEV,CACIF,KAAM,CAAC,EAAG,GACVE,KAAM,sBAEV,CACIF,KAAM,CAAC,EAAG,IACVE,KAAM,WAEV,CACIF,KAAM,CAAC,GAAI,IACXE,KAAM,eAEV,CACIF,KAAM,CAAC,GAAI,IACXE,KAAM,WAEV,CACIF,KAAM,CAAC,GAAI,IACXE,KAAM,e,OC1FC,SAASC,IAAU,IACvBC,EAAkB,IAAVC,EAAe,IAOxBC,EAAY,CACd,CAAC,EAAG,KACJ,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,MAIJC,EAAcC,cACfC,OAAO,CAAC,EAAG,KACXC,MAAM,CAAC,EAAG,MAETC,EAAWH,cACZC,OAAOG,YAAOf,IACda,MAAM,CAACJ,EAAU,GAAG,GAAIA,EAAU,GAAG,KAEpCO,EAAS,aAzBc,EA4BKC,oBAAS,GA5Bd,mBA4BtBC,EA5BsB,KA4BXC,EA5BW,OA+BOF,mBAAS,aA/BhB,mBA+BtBG,EA/BsB,KA+BVC,EA/BU,KAiC7B,SAASC,EAAUC,EAAKC,GACpB,IAAMC,EAAM,YAAOF,GACnB,MAAmB,WAAfH,EACIK,EAAOC,SAASF,GACTC,EAAOE,QAAO,SAAAC,GAAE,OAAIA,IAAOJ,MAEtCC,EAAOI,KAAKL,GACLC,GAEHA,EAAOC,SAASF,GACT,GAEA,CAACA,GAKpB,IAAMM,EAAYnB,cACbC,OAAO,CAAC,GAAD,OAAII,EAAJ,uBAA0BA,EAA1B,cAA6Ce,KAAI,SAAAP,GAAC,OAAIQ,IAAOR,GAAGS,WACvEpB,MAAM,CAAC,EAAa,EAAVqB,KAAKC,KAEdC,EAAcC,cACfC,aAAY,SAAAd,GAAC,OAAIV,EAASU,EAAEe,QAC5BC,aAAY,SAAAhB,GAAC,OAAIV,EAASU,EAAEe,MAAQ9B,EAAU,GAAG,GAAKA,EAAU,GAAG,IAAMT,EAAQyC,UACjFC,YAAW,SAAAlB,GAER,OAAOM,EAAUN,EAAEmB,SAEtBC,UAAS,SAAApB,GAAC,OAAIM,EAAUN,EAAEmB,KAAO,QA7DT,EAgEW1B,mBAAS,IAhEpB,mBAgEtB4B,EAhEsB,KAgERC,EAhEQ,OAmES7B,mBAAS,IAnElB,mBAmEtB8B,EAnEsB,KAmETC,EAnES,OAoEe/B,mBAAS,IApExB,mBAoEtBgC,EApEsB,KAoENC,EApEM,OAqEWjC,mBAAS,IArEpB,mBAqEtBkC,EArEsB,KAqERC,EArEQ,KAuEvBC,EAAcC,mBAAQ,WACxB,OAAOT,EACNlB,QAAO,SAAAH,GAAC,OAAIuB,EAAYN,QAASM,EAAYrB,SAASF,EAAE+B,aACxD5B,QAAO,SAAAH,GAAC,OAAI2B,EAAaV,QAASU,EAAazB,SAASF,EAAEgC,iBAC5D,CAACT,EAAaF,EAAcM,IA3EF,EA4EKlC,mBAAS,IA5Ed,mBA4EtBwC,GA5EsB,KA4EXC,GA5EW,KA8EvBC,GAAeL,mBAAQ,WACzB,IAAMM,EAAU7C,YAAOsC,GAAa,SAAA7B,GAAC,OAAIqC,OAAOrC,EAAEsC,UAClD,OAAOnD,cACNC,OAAOgD,GACP/C,MAAM,CAAC,GAAK,MACd,CAACwC,IAEJU,qBAAU,WACN,IAAMC,EAAM,IAAIC,SAAQ,SAAAC,GACpBC,YAAI,sBAAsBC,MAAK,SAAAC,GAC3BC,QAAQC,IAAIF,GACZ,IAAMG,EAAiBH,EAAItC,KAAI,SAAAP,GAAM,IAAD,EACLA,EAAEiD,UAAUC,MAAM,KADb,mBACzBC,EADyB,KAChBC,EADgB,KAE1BrC,EAAMP,IAAO2C,GAAS1C,OACtBU,EAAOX,IAAO,GAAD,OAAIhB,EAAJ,YAAc4D,EAAd,QAA4B3C,OAE/C,OAAO,2BACAT,GADP,IAEIe,MACAvB,OAAQ2D,EACRhC,OACAkC,KAAMD,EAAQF,MAAM,KAAK,QAG3BI,EAASC,gBAAMV,GAAKtC,IAAI,cAAciD,OAAOC,QACnDvB,GAAaoB,GACbhC,EAAgB0B,GAChBN,EAAQG,SAGVa,EAAM,IAAIjB,SAAQ,SAAAC,GACpBC,YAAI,2BAA2BC,MAAK,SAAAC,GAChCH,EAAQG,SAGhBJ,QAAQkB,IAAI,CAACnB,EAAIkB,IAAMd,MAAK,SAAAC,SAK7B,IAEH,IAAMe,GAAmB9B,mBAAQ,WAC7B,OAAOD,EAAYgC,QAAO,SAACC,EAAK9D,GAC5B,IAAM+D,EAAMD,EAAI9D,EAAE+B,WAAa,EACzBiC,EAASC,YAAYF,EAAM1B,OAAOrC,EAAEsC,QAAQ4B,QAAQ,KAE1D,OADAJ,EAAI9D,EAAE+B,UAAYiC,EACXF,IACR,MACJ,CAACjC,IAEEsC,GAAkBrC,mBAAQ,WAC5B,IAAMM,EAAU7C,YAAO6E,OAAOC,OAAOT,KACrC,OAAOzE,cACNC,OAAOgD,GACP/C,MAAM,CAAC,GAAK,MACd,CAACuE,KAGEU,GAAWf,gBAAM9E,GAClB8B,IAAI,QACJgE,UACAd,QACCe,GAAqBrF,cACtBC,OAAO,CAAC,EAAGkF,GAASrD,SACpB5B,MAAM,CAAC,EAAa,EAAVqB,KAAKC,KAEd8D,GAAoB5D,cACrBC,aAAY,SAAAd,GAAC,OAAIf,EAAU,GAAG,MAC9B+B,aAAY,SAAAhB,GAAC,OAAIf,EAAU,GAAG,MAC9BiC,YAAW,SAAAlB,GAAM,IACPtB,EAAQsB,EAARtB,KACDgG,EAAQjG,EAAckG,WAAU,SAAA3E,GAAC,OAAIA,EAAEtB,OAASA,KAChDkG,EAAQrB,gBAAM9E,GACfoG,MAAM,EAAGH,GACTnE,IAAI,QACJgE,UACAd,QACAxC,OAEL,OAAOuD,GAAmBI,MAE7BxD,UAAS,SAAApB,GAAM,IACLtB,EAAQsB,EAARtB,KACDgG,EAAQjG,EAAckG,WAAU,SAAA3E,GAAC,OAAIA,EAAEtB,OAASA,KAChDkG,EAAQrB,gBAAM9E,GACfoG,MAAM,EAAGH,EAAQ,GACjBnE,IAAI,QACJgE,UACAd,QACAxC,OACL,OAAOuD,GAAmBI,MAE7BE,SAAS,KACTC,aAAa,GAEZC,GAAYnE,cACbC,aAAY,SAAAd,GAAC,OAAIf,EAAU,GAAG,MAC9B+B,aAAY,SAAAhB,GAAC,OAAIf,EAAU,GAAG,MAC9BiC,YAAW,SAAAlB,GACR,IAAM0E,EAAQJ,GAASW,QAAQjF,GAC/B,OAAOwE,GAAmBE,MAE7BtD,UAAS,SAAApB,GACN,IAAM0E,EAAQJ,GAASW,QAAQjF,GAC/B,OAAOwE,GAAmBE,EAAQ,MAErCI,SAAS,KACTC,aAAa,GAEZG,GAAWrE,cACZC,aAAY,SAAAd,GAAC,OAAIf,EAAU,GAAG,MAC9B+B,aAAY,SAAAhB,GAAC,OAAIf,EAAU,GAAG,MAC9BiC,YAAW,SAAAlB,GACR,OAAGA,EAAE,GAAG,EACGM,EAAUE,IAAO,cAAD,OAAe,GAAf,WAA2BC,QAE/CH,EAAUE,IAAO,GAAD,OAAIhB,EAAJ,YAAcQ,EAAE,GAAhB,WAA4BS,WAEtDW,UAAS,SAAApB,GAAC,OAAIM,EAAUE,IAAO,GAAD,OAAIhB,EAAJ,YAAcQ,EAAE,GAAhB,WAA4BS,WAC1DqE,SAAS,IACTC,aAAa,GAEZI,GAAgB,SAAAnF,GAClB,IAAKA,EAAEc,cAAgBd,EAAEgB,YACrB,MAAO,GAEX,IAAMoE,EAAS,CAACpF,EAAEkB,WAAYlB,EAAEoB,UAAUb,KACtC,SAAAH,GAAE,OAAIA,EAAKM,KAAKC,GAAK,KAEnB0E,EAAK3E,KAAK4E,IAAI,GAAItF,EAAEgB,YAAchB,EAAEc,aAAe,GACnDyE,GAAeH,EAAO,GAAKA,EAAO,IAAM,EACxCI,EAAkBD,EAAc,GAAKA,EAAc7E,KAAKC,GAC1D6E,GAAiBJ,EAAOK,UAC5B,IAAMC,EAAUC,cAEhB,OADAD,EAAQ7E,IAAI,EAAG,EAAGwE,EAAID,EAAO,GAAIA,EAAO,GAAII,GACrCE,EAAQE,YAGbC,GAAaC,YAAarH,EAAc8B,KAAI,SAAAP,GAAC,OAAIA,EAAEtB,QAAMqH,KAAKC,KAAYC,KAC1EC,GAAWpE,mBAAQ,WACrB,OAAOG,GAAU4B,QAAO,SAACC,EAAK9D,GAC1B,IAAMmG,EAAW5C,gBAAM1B,GAClB1B,QAAO,SAAAC,GAAE,OAAIA,EAAG4B,aAAehC,KAC/B6D,QAAO,SAACC,EAAK1D,GACV,IAAMgG,EAAMhG,EAAGZ,OAGf,OAFKsE,EAAIsC,KAAMtC,EAAIsC,GAAO,IAC1BtC,EAAIsC,GAAK/F,KAAKO,EAAYyF,SAASjG,IAC5B0D,IACR,IACFO,SACAZ,QAEL,OADAK,EAAI9D,GAAKmG,EACFrC,IACR,MACJ,CAAC7B,GAAWJ,EAAajB,IAEtB0F,GAAiBxE,mBAAQ,WAC3B,OAAOyB,gBAAM1B,GACRtB,KAAI,SAAAP,GAAC,OAAIA,EAAER,OAAO+G,QAAQ,QAAS,OACnC/C,OACAC,UACN,CAAC5B,IAEE2E,GAAYC,cACbC,GAAE,SAAA1G,GAAC,OAAIA,EAAE,MACT2G,GAAE,SAAA3G,GAAC,OAAIA,EAAE,MACT4G,MAAMC,IAAgBC,MAAM,KAE3BC,GAAU,CAAC,QAAS,QAAS,QAAS,SAC5C,OACI,sBAAKC,UAAU,QAAf,UACI,qBAAKjI,OAAQA,EAAQC,MAAOA,EAAOgI,UAAU,OAA7C,SACI,oBAAGC,UAAS,oBAxPqB,GAwPrB,aAxPY,GAwPZ,KAAZ,UACI,mBAAGD,UAAU,SAAb,SACKxI,EAAQ+B,KAAI,SAACP,EAAGkH,GACb,IAAMC,EAAO3G,IAAW,IAAJR,GAAUoH,OAAO,SAC/BC,EAAcf,GAAepG,SAASiH,GAAQ,EAAI,EACxD,OAAO,8BACH,uBAAMG,QAASD,EAAaJ,UAAS,oBAAejI,IAAf,aAA6BD,IAAYO,EAASU,GAAlD,KAArC,UACKmH,EADL,IACYJ,GAAQ7G,SAASiH,GAAQ,UAAY,MAEjD,wBAAQI,GAAIvI,IAAWwI,GAAIzI,IAAY0I,EAAGnI,EAASU,OAJxCA,QAQvB,mBAAGgH,UAAU,WAAb,SACK,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,IAAIzG,KAAI,SAACP,EAAGkH,GAC5B,IAAMQ,EAAO,CACTC,GAAI3I,IACJ4I,GAAI7I,IAAaE,EAAU,GAAG,GAC9B4I,GAAI7I,IACJ8I,GAAI/I,KAER,OACI,oBAAWiI,UAAU,YAAYC,UAAS,iBAAY/H,EAAYc,GAAxB,KAA1C,UACI,oCAAU0H,IACV,sBAAMhB,EAAGgB,EAAKC,GAAIhB,EAAGe,EAAKE,GAAIG,GAAI,EAAlC,mBAAyC/H,EAAzC,WAFIA,QAQpB,mBAAGgH,UAAU,gBAAgBC,UAAS,oBAAejI,IAAf,aAA2BD,IAA3B,KAAtC,SACKH,EAAiB2B,KAAI,SAACP,EAAGkH,GACtB,IAAMQ,EAAO,CACT1H,EAAGkF,GAASlF,EAAErB,OAEZqJ,EAAoB,CACtBC,KAAM,OACNC,GAAG,QAAD,OAAUhB,GACZlH,EAAGmF,GAAc,CACbrE,YAAa7B,EAAU,GAAG,GAAK,GAC/B+B,YAAa/B,EAAU,GAAG,GAAG,GAC7BiC,WAAYlB,EAAErB,KAAK,GAAK,EACpB2B,EAAUE,IAAO,cAAD,OAAe,GAAf,WAA2BC,QACzCH,EAAUE,IAAO,GAAD,OAAIhB,EAAJ,YAAcQ,EAAErB,KAAK,GAArB,WAAiC8B,QACvDW,SAAUd,EAAUE,IAAO,GAAD,OAAIhB,EAAJ,YAAcQ,EAAErB,KAAK,GAArB,WAAiC8B,WAG7D0H,EAAgB,CAClBC,KAAK,SAAD,OAAWlB,GACfmB,YAAa,MACbC,iBAAkB,UAEtB,OACI,8BACI,gDAAUZ,GAAV,IAAgBV,UAAU,iBAC1B,oBAAGA,UAAU,aAAb,UACI,oCAAUgB,IACV,+BACI,oDAAcG,GAAd,aACKnI,EAAEnB,eANXmB,EAAErB,KAAK,SAc3B,mBAAGqI,UAAU,YAAYC,UAAS,oBAAejI,IAAf,aAA2BD,IAA3B,KAAlC,SACK8C,EAAYtB,KAAI,SAACP,EAAGkH,GACjB,IAAMqB,EAAY9J,EAAc+J,MAAK,SAAApI,GAAE,OAAIA,EAAGzB,KAAKuB,SAASF,EAAE+B,aAAWrD,KACnEgJ,EAAO,CACTV,UAAW,eACXhH,EAAGY,EAAYZ,GACfiI,KAAMpC,GAAW0C,GACjBE,YAAatG,GAAanC,EAAEsC,QAEhC,OACI,oCAAkCoF,GAAvBgB,KAAKC,UAAU3I,SAItC,mBAAGgH,UAAU,iBAAiBC,UAAS,oBAAejI,IAAf,aAA6BD,IAA7B,KAAvC,SACKN,EAAc8B,KAAI,SAACP,EAAGkH,GAAO,IACnBxI,EAAcsB,EAAdtB,KAAMC,EAAQqB,EAARrB,KACP+I,EAAO,CACT1H,EAAGyE,GAAkBzE,GACrBiI,KAAMpC,GAAWnH,GACjBkK,OAAQ/C,GAAWnH,IAEjBgG,EAAQjG,EAAckG,WAAU,SAAAvE,GAAE,OAAIA,EAAG1B,OAASA,KAClDkG,EAAQrB,gBAAM9E,GACfoG,MAAM,EAAGH,GACTnE,IAAI,QACJgE,UACAd,QACAxC,OACC+G,EAAoB,CACtBC,KAAM,OACNC,GAAG,QAAD,OAAUxJ,GACZsB,EAAGmF,GAAc,CACbrE,YAAa7B,EAAU,GAAG,GAC1B+B,YAAa/B,EAAU,GAAG,GAC1BiC,WAAYsD,GAAmBI,GAC/BxD,SAAUoD,GAAmBI,EAAQjG,EAAKsC,WAG5CkH,EAAgB,CAClBC,KAAK,SAAD,OAAW1J,GACf2J,YAAa,MACbC,iBAAkB,UAElBtB,EAAYvF,EAAevB,SAASxB,GAAQ,SAAW,GACvD+C,EAAeR,OAAS,IAAMQ,EAAevB,SAASxB,KACtDsI,EAAY,YAEhB,IAAMM,EAAUuB,uBAAahH,EAAYtB,KAAI,SAAAH,GAAE,OAAIA,EAAG2B,YAAWpD,GAAMsC,OAAS,EAAI,GACpF,OACI,oBAAgB+F,UAAWA,EACvBM,QAASA,EACTwB,QAAS,WACL,IAAMC,EAAoBjJ,EAAU2B,EAAgB/C,GACpDgD,EAAkBqH,GAClB,IAAMC,EAAiBzF,gBAAM9E,GACxB0B,QAAO,SAAAC,GAAE,OAAI2I,EAAkB7I,SAASE,EAAG1B,SAC3C6B,IAAI,QACJgE,UACAd,QACLjC,EAAewH,IAVvB,UAaI,gDAAUtB,GAAV,IAAgBV,UAAU,qBAC1B,oBAAGA,UAAU,iBAAb,UACI,oCAAUgB,IACV,+BACI,oDAAcG,GAAd,aACKnI,EAAEtB,eAlBXsB,EAAEtB,WA0BtB,mBAAGsI,UAAU,eAAeC,UAAS,oBAAejI,IAAf,aAA2BD,IAA3B,KAArC,SAEIN,EAAc8B,KAAI,SAACH,EAAI6I,GAAO,IACnBvK,EAAc0B,EAAd1B,KAAMC,EAAQyB,EAARzB,KACPiG,EAAQrB,gBAAM9E,GACfoG,MAAM,EAAGoE,GACT1I,IAAI,QACJgE,UACAd,QACAxC,OAEL,OACI,4BAEQtC,EAAK4B,KAAI,SAACP,EAAGkH,GACT,IAAMQ,EAAO,CACT1H,EAAGgF,GAAUhF,GACbiI,KAAMpC,GAAWnH,GACjBkK,OAAQ/C,GAAWnH,GACnB+J,YAAatE,GAAgBP,GAAiB5D,KAE5CgI,EAAoB,CACtBC,KAAM,OACNC,GAAG,QAAD,OAAUlI,GACZA,EAAGmF,GAAc,CACbrE,YAAa7B,EAAU,GAAG,GAC1B+B,YAAa/B,EAAU,GAAG,GAC1BiC,WAAYsD,GAAmBI,EAAQsC,GACvC9F,SAAUoD,GAAmBI,EAAQsC,EAAI,MAG3CiB,EAAgB,CAClBC,KAAK,SAAD,OAAWpI,GACfqI,YAAa,MACbC,iBAAkB,UAElBtB,EAAYzF,EAAYrB,SAASF,GAAK,SAAW,GACjDuB,EAAYN,OAAS,IAAMM,EAAYrB,SAASF,KAChDgH,EAAY,YAEhB,IAAMM,EAAUzF,EAAYtB,KAAI,SAAAP,GAAC,OAAIA,EAAE+B,YAAU7B,SAASF,GAAK,EAAI,GACnE,OACI,oBAAWsH,QAASA,EAASN,UAAWA,EAAW8B,QAAS,WACxD,IAAME,EAAiBlJ,EAAUyB,EAAavB,GACxCkJ,EAAUzK,EACX0B,QAAO,SAAAC,GAAE,OAAIA,EAAGzB,KAAKwB,QAAO,SAAAgJ,GAAE,OAAIH,EAAe9I,SAASiJ,MAAKlI,UAC/DV,KAAI,SAAAH,GAAE,OAAIA,EAAG1B,QAClB8C,EAAewH,GACftH,EAAkBwH,IANtB,UAQI,gDAAUxB,GAAV,IAAgBV,UAAU,kBAC1B,oBAAGA,UAAU,cAAb,UACI,oCAAUgB,IACV,+BACI,oDAAcG,GAAd,aACKnI,EAAEkD,MAAM,KAAK3C,KAAI,SAACH,EAAI6I,GAAL,OACd,uBAAOtC,EAAO,GAAJsC,EAAV,SAA4B7I,GAALA,gBAdnCJ,OA9BxB,YAAatB,SAyDzB,oBAAGsI,UAAU,WAAWC,UAAS,oBAAejI,IAAf,aAA2BD,IAA3B,KAAjC,UACI,wBAAQiI,UAAU,KAAKO,GAAI,EAAGC,GAAI,EAAGC,EAAGxI,EAAU,GAAG,KACrD,4BAEQgD,GAAU1B,KAAI,SAACP,EAAGkH,GACd,IACMkC,EAAQlC,GADOxG,KAAKC,IAAM,EAAID,KAAK2I,KAAK,KAExC5B,EAAI/G,KAAK2I,KAAKnC,GAAKxG,KAAK2I,KAAKpH,GAAUhB,QACvCsG,GAAMtI,EAAU,GAAG,GAAK,KAAOwI,EAAI/G,KAAK4I,IAAIF,IAC5C5B,GAAMvI,EAAU,GAAG,GAAK,KAAOwI,EAAI/G,KAAK6I,IAAIH,IAC5C9B,EAAUzF,EAAYtB,KAAI,SAAAH,GAAE,OAAIA,EAAG4B,cAAY9B,SAASF,GAAK,EAAI,GACnEgH,EAAYrF,EAAazB,SAASF,GAAK,SAAW,GAItD,OAHI2B,EAAaV,OAAS,IAAMU,EAAazB,SAASF,KAClDgH,EAAY,YAGZ,oBACIC,UAAS,oBAAeM,EAAf,aAAsBC,EAAtB,KACTF,QAASA,EACTwB,QAAS,WACL,IAAMU,EAAmB1J,EAAU6B,EAAc3B,GACjD4B,EAAgB4H,IALxB,UAQI,wBAAgB/B,EAAG,EAAGT,UAAS,eAAUA,IAA5BhH,GACb,+BAAOA,eAO/B,mBAAGgH,UAAU,gBAAgBC,UAAS,oBAAejI,IAAf,aAA2BD,IAA3B,KAAtC,SAEQqF,OAAOqF,QAAQvD,IACV3F,KAAI,SAAAP,GAAM,IAAD,cACeA,EADf,GACCnB,EADD,KACOF,EADP,KAEF2I,EAAU3F,EAAazB,SAASrB,GAAQ,EAAI,EAKhD,OAHIyI,IACAA,EAAU5H,EAAY,EAAI,GAG1B,mBAAG4H,QAASA,EAAZ,SACK3I,EAAK4B,KAAI,SAAAH,GACN,OAAO,sBAAMJ,EAAIwG,GAAUpG,IAAUA,EAAGwF,gBAFtB/G,aAYtD,sBAAKmI,UAAU,OAAf,UACI,sBAAKA,UAAU,YAAf,UACI,sBAAKA,UAAU,OAAf,8BAEK,CAAC,SAAU,aAAazG,KAAI,SAAAP,GACzB,OACI,qCACI,uBAAO0J,QAAS1J,EAAhB,SAAoBA,IACpB,uBACItB,KAAK,QACLG,KAAK,cACL8K,QAAS/J,IAAeI,EACxB4J,SAAU,WACFhK,IAAeI,GACfH,EAAcG,IAGtByD,MAAOzD,EACPkI,GAAIlI,aAMxB,sBAAKgH,UAAU,OAAf,sCAEI,uBACItI,KAAK,WACLG,KAAK,aACL8K,QAASjK,EACTkK,SAAU,WACNjK,GAAcD,SAI1B,qBAAKsH,UAAU,OAAf,SACI,wBAAQ8B,QAAS,WACbtH,EAAe,IACfE,EAAkB,IAClBE,EAAgB,KAHpB,0BAOR,cAACiI,EAAD,CAAUlL,KAAMkD,UAOhC,SAASgI,EAAT,GAAiC,IAAD,IAAZlL,YAAY,MAAL,GAAK,EAItBmL,EAAa/K,IAGbgL,EAAQC,iBAAO,MACfC,EAAUD,iBAAO,MAqEvB,OAnEAzH,qBAAU,WACN,IAAMR,EAAWwB,gBAAM5E,GAAM4B,IAAI,YAAYiD,OAAOC,QAC9C5E,EAAO0E,gBAAM5E,GAAM4B,IAAI,cAAciD,OAAOC,QAG5CyG,GAFO3G,gBAAM5E,GAAM4B,IAAI,QAAQiD,OAAOC,QAE3B,CACbzB,WAAYmI,cACP/K,OAAOP,GACPQ,MAAM,CAAC,EAAGyK,IACftK,OAAQ2K,cACH/K,OAAOZ,EAAQ+B,KAAI,SAAAP,GAAC,OAAIQ,IAAW,IAAJR,GAAUoH,OAAO,kBAChD/H,MAAM,CAAC,EAAGyK,IACfzG,KAAMlE,cACDC,OAAO,CAAC,EAAG,KAEXC,MAAM,CAAC,EAAGyK,IACf/H,SAAUoI,cACL/K,OAAO2C,GACP1C,MAAM,CAAC,EAAGyK,IACfxH,MAAOnD,cACFC,OAAO,CAAC,EAAGG,YAAOZ,GAAM,SAAAqB,GAAC,OAAIqC,OAAOrC,EAAEsC,UAAQ,IAAImD,WAClDpG,MAAM,CAAC,EAAGyK,MAGbM,EAASD,cACV/K,OAAOgF,OAAOiG,KAAKH,IACnB7K,MAAM,CAAC,EA/BEL,MAiCdsL,YAAOP,EAAMQ,SACRC,UAAU,WACVC,SACLH,YAAOP,EAAMQ,SACRC,UAAU,WACV7L,KAAKyF,OAAOiG,KAAKH,IACjBQ,QACAC,OAAO,KACPC,QAAQ,SAAS,GACjBlD,KAAK,aAAa,SAAA1H,GACf,MAAM,aAAN,OAAoBoK,EAAOpK,GAA3B,KAAkC,EAAlC,QAEH6K,MAAK,SAAgB7K,GAClB,IAAM8K,EAAOC,cACRC,MAAMd,EAASlK,IAEpBsK,YAAOW,MAAMC,KAAKJ,MAG1B,IAAMK,EAAU1E,cAQhB6D,YAAOL,EAAQM,SACVC,UAAU,QACVC,SAELH,YAAOL,EAAQM,SACVC,UAAU,QACV7L,KAAKA,GACL+L,QACAC,OAAO,QACPjD,KAAK,KAhBG,SAAA1H,GACT,OAAOmL,EACH/G,OAAOiG,KAAKH,GACP3J,KAAI,SAAA6F,GAAG,MAAI,CAACgE,EAAOhE,GAAM8D,EAAS9D,GAAKpG,EAAEoG,cAcvD,CAACzH,IAGA,qBAAKI,OA5EqB,IA4ELC,MA5EA,IA4EcgI,UAAU,WAA7C,SACI,oBAAGC,UAAS,oBA9E4B,GA8E5B,aA9EgB,GA8EhB,KAAZ,UACI,mBAAGmE,IAAKnB,EAASjD,UAAU,SAC3B,mBAAGoE,IAAKrB,SCvoBTsB,MATf,WACE,OACE,qBAAKrE,UAAU,MAAf,SAEI,cAAClI,EAAD,OCIOwM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB5I,MAAK,YAAkD,IAA/C6I,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.27e6fd79.chunk.js","sourcesContent":["export const timeArr = [\n    1388937600\n  , 1389024000\n  , 1389110400\n  , 1389196800\n  , 1389283200\n  , 1389369600\n  , 1389456000\n  , 1389542400\n  , 1389628800\n  , 1389715200\n  , 1389801600\n  , 1389888000\n  , 1389974400\n  , 1390060800]\n\nexport const storeClassify = [\n    {\n        type: 'restaurant',\n        data: [\n            \"Brew've Been Served\",\n            'Hallowed Grounds',\n            'Coffee Cameleon',\n            'Coffee Shack',\n            'Bean There Done That',\n            \"Jack's Magical Beans\",\n            'Brewed Awakenings',\n            'Katerinas Caf',\n            'Gelatogalore',\n            'Ouzeri Elian',\n            'Kalami Kafenion',\n            'Hippokampos',\n            'Abila Zacharo',\n            \"Guy's Gyros\",\n        ],\n    },\n    {\n        type: 'parter',\n        data: [\n            'Abila Airport',\n            'Nationwide Refinery',\n            'Maximum Iron and Steel',\n            'Carlyle Chemical Inc.',\n            'Abila Scrapyard',\n            \"Octavio's Office Supplies\",\n            'Chostus Hotel',\n            \"Frank's Fuel\",\n            'Kronos Pipe and Irrigation',\n            'Stewart and Sons Fabrication',\n        ],\n    },\n    {\n        type: 'shop',\n        data: [\n            \"Albert's Fine Clothing\",\n            'Kronos Mart',\n            'Daily Dealz',\n            \"Shoppers' Delight\",\n            'Ahaggo Museum',\n        ],\n    },\n    {\n        type: 'entertainment',\n        data: [\n            \"Desafio Golf Course\",\n            'Roberts and Sons',\n        ],\n    },\n    {\n        type: 'other',\n        data: [\n            'U-Pump',\n            'General Grocer',\n            \"Frydos Autosupply n' More\",\n        ]\n    }\n]\n\nexport const timeClassifyData = [\n    {\n        data: [-2, 6],\n        name: 'Sleeping',\n    },\n    {\n        data: [6, 9],\n        name: 'On the way to work',\n    },\n    {\n        data: [9, 12],\n        name: 'Working',\n    },\n    {\n        data: [12, 14],\n        name: 'Lunch Break',\n    },\n    {\n        data: [14, 18],\n        name: 'Working',\n    },\n    {\n        data: [18, 22],\n        name: 'After work',\n    }\n]\n\n// export const customeData","import { ascending, extent } from 'd3-array'\nimport { csv } from 'd3-fetch'\nimport { path } from 'd3-path'\nimport { axisLeft, drag, scaleBand, scaleLinear, scaleOrdinal, scalePoint, schemeCategory10, select } from 'd3'\nimport { arc, curveCatmullRom, line } from 'd3-shape'\nimport { chain, intersection, set } from 'lodash'\nimport moment from 'moment'\nimport React, { useEffect, useMemo, useRef, useState } from 'react'\nimport { storeClassify, timeArr, timeClassifyData } from './data'\nimport './index.scss'\n\nexport default function FirstQ() {\n    const [height, width] = [800, 800]\n\n    const [top, right, bottom, left] = [10,10,10,10]\n\n    const realHeight = height - top - bottom\n    const realWidth = width - left - right\n\n    const radiusArr = [\n        [0, 100], // card\n        [100, 240], // timeCircle\n        [370, 371], // timeLabel\n        [270, 300], // store\n        [320, 350], // classify\n    ]\n\n\n    const anagleScale = scaleLinear()\n        .domain([0, 24])\n        .range([0, 360])\n\n    const dayScale = scaleLinear()\n        .domain(extent(timeArr))\n        .range([radiusArr[1][0], radiusArr[1][1]])\n\n    const dayStr = '2020-01-01'\n\n    // 是否展示track \n    const [showTrack, setshowTrack] = useState(true)\n\n    // 选中模式\n    const [selectMode, setselectMode] = useState('mulitiple')\n\n    function pushOrPop(arr, d) {\n        const newArr = [...arr]\n        if (selectMode !== 'single') {\n            if (newArr.includes(d)) {\n                return newArr.filter(d1 => d1 !== d)\n            }\n            newArr.push(d)\n            return newArr\n        } else {\n            if (newArr.includes(d)) {\n                return []\n            } else {\n                return [d]\n            }\n        }\n    }\n\n    const timeScale = scaleLinear()\n        .domain([`${dayStr} 00:00:00`, `${dayStr} 23:59:59`].map(d => moment(d).unix()))\n        .range([0, Math.PI * 2])\n\n    const consumePath = arc()\n        .innerRadius(d => dayScale(d.day))\n        .outerRadius(d => dayScale(d.day) + (radiusArr[1][1] - radiusArr[1][0]) / timeArr.length )\n        .startAngle(d => {\n            // console.log(d.ti)\n            return timeScale(d.time)\n        })\n        .endAngle(d => timeScale(d.time + 500))\n\n    // getData\n    const [originCCdata, setOriginCCdata] = useState([])\n\n    // 选中\n    const [activeStore, setActiveStore] = useState([])\n    const [activeClassify, setActiveClassify] = useState([])\n    const [activeCustom, setActiveCustom] = useState([])\n\n    const consumeData = useMemo(() => {\n        return originCCdata\n        .filter(d => activeStore.length ? activeStore.includes(d.location) : true)\n        .filter(d => activeCustom.length ? activeCustom.includes(d.last4ccnum) : true)\n    }, [activeStore, originCCdata, activeCustom])\n    const [ccNumData, setccNumData] = useState([])\n\n    const priceOpacity = useMemo(() => {\n        const extents = extent(consumeData, d => Number(d.price))\n        return scaleLinear()\n        .domain(extents)\n        .range([0.2, 1])\n    }, [consumeData])\n\n    useEffect(() => {\n        const cc  = new Promise(resolve => {\n            csv('./data/cc_data.csv').then(res => {\n                console.log(res)\n                const newConsumeData = res.map(d => {\n                    const [dayStrs, hourStr] = d.timestamp.split(' ')\n                    const day = moment(dayStrs).unix()\n                    const time = moment(`${dayStr} ${hourStr}:00`).unix()\n                    // 时间有点不准确\n                    return {\n                        ...d,\n                        day,\n                        dayStr: dayStrs,\n                        time,\n                        hour: hourStr.split(':')[0],\n                    }\n                })\n                const newLoy = chain(res).map('last4ccnum').uniq().value()\n                setccNumData(newLoy)\n                setOriginCCdata(newConsumeData)\n                resolve(res)\n            })\n        })\n        const loy = new Promise(resolve => {\n            csv('./data/loyalty_data.csv').then(res => {\n                resolve(res)\n            })\n        })\n        Promise.all([cc, loy]).then(res => {\n            // draw(res)\n            // calcualteTimeData(res[0])\n            // calculateLocationData(res[0], res[1])\n        })\n    }, [])\n\n    const locationPriceObj = useMemo(() => {\n        return consumeData.reduce((obj, d) => {\n            const num = obj[d.location] || 0\n            const newNum = parseFloat((num + Number(d.price)).toFixed(10))\n            obj[d.location] = newNum\n            return obj\n        }, {})\n    }, [consumeData])\n\n    const locationOpacity = useMemo(() => {\n        const extents = extent(Object.values(locationPriceObj))\n        return scaleLinear()\n        .domain(extents)\n        .range([0.2, 1])\n    }, [locationPriceObj])\n    \n    // store\n    const storeArr = chain(storeClassify)\n        .map('data')\n        .flatten()\n        .value()\n    const storeClassifyScale = scaleLinear()\n        .domain([0, storeArr.length])\n        .range([0, Math.PI * 2])\n\n    const storeClassifyPath = arc()\n        .innerRadius(d => radiusArr[4][0])\n        .outerRadius(d => radiusArr[4][1])\n        .startAngle(d => {\n            const {type} = d\n            const index = storeClassify.findIndex(d => d.type === type)\n            const count = chain(storeClassify)\n                .slice(0, index)\n                .map('data')\n                .flatten()\n                .value()\n                .length\n\n            return storeClassifyScale(count)\n        })\n        .endAngle(d => {\n            const {type} = d\n            const index = storeClassify.findIndex(d => d.type === type)\n            const count = chain(storeClassify)\n                .slice(0, index + 1)\n                .map('data')\n                .flatten()\n                .value()\n                .length\n            return storeClassifyScale(count)\n        })\n        .padAngle(.01)\n        .cornerRadius(4)\n\n    const storePath = arc()\n        .innerRadius(d => radiusArr[3][0])\n        .outerRadius(d => radiusArr[3][1])\n        .startAngle(d => {\n            const index = storeArr.indexOf(d)\n            return storeClassifyScale(index)\n        })\n        .endAngle(d => {\n            const index = storeArr.indexOf(d)\n            return storeClassifyScale(index + 1)\n        })\n        .padAngle(.01)\n        .cornerRadius(4)\n\n    const timePath = arc()\n        .innerRadius(d => radiusArr[2][0])\n        .outerRadius(d => radiusArr[2][1])\n        .startAngle(d => {\n            if(d[0]<0) {\n                return timeScale(moment(`2019-12-31 ${22}:00:00`).unix())\n            }\n            return timeScale(moment(`${dayStr} ${d[0]}:00:00`).unix())\n        })\n        .endAngle(d => timeScale(moment(`${dayStr} ${d[1]}:00:00`).unix()))\n        .padAngle(.1)\n        .cornerRadius(4)\n\n    const middleArcLine = d => {\n        if (!d.innerRadius || !d.outerRadius) {\n            return ''\n        }\n        const angles = [d.startAngle, d.endAngle].map(\n            d1 => d1 - Math.PI / 2\n        )\n        const r1 = Math.max(0, (d.outerRadius + d.innerRadius) / 2)\n        const middleAngle = (angles[1] + angles[0]) / 2\n        const invertDirection = middleAngle > 0 && middleAngle < Math.PI\n        if (invertDirection) angles.reverse()\n        const pathFun = path()\n        pathFun.arc(0, 0, r1, angles[0], angles[1], invertDirection)\n        return pathFun.toString()\n    }\n\n    const colorScale = scaleOrdinal(storeClassify.map(d => d.type).sort(ascending), schemeCategory10)\n    const pointObj = useMemo(() => {\n        return ccNumData.reduce((obj, d) => {\n            const thisData = chain(consumeData)\n                .filter(d1 => d1.last4ccnum === d)\n                .reduce((obj, d1) => {\n                    const key = d1.dayStr\n                    if (!obj[key]) obj[key] = []\n                    obj[key].push(consumePath.centroid(d1))\n                    return obj\n                }, {})\n                .values()\n                .value()\n            obj[d] = thisData\n            return obj\n        }, {})\n    }, [ccNumData, consumeData, consumePath])\n\n    const activeTimeData = useMemo(() => {\n        return chain(consumeData)\n            .map(d => d.dayStr.replace('/2014', ''))\n            .uniq()\n            .value()\n    }, [consumeData])\n\n    const trackPath = line()\n        .x(d => d[0])\n        .y(d => d[1])\n        .curve(curveCatmullRom.alpha(0.5));\n\n    const weekDay = ['01/11', '01/12', '01/18', '01/19']\n    return (\n        <div className='graph'>\n            <svg height={height} width={width} className='main'>\n                <g transform={`translate(${left}, ${top})`}>\n                    <g className=\"timebg\">\n                        {timeArr.map((d, i) => {\n                            const text = moment(d * 1000).format('MM/DD')\n                            const textOpactiy = activeTimeData.includes(text) ? 1 : 0\n                            return <g key={d}>\n                                <text opacity={textOpactiy} transform={`translate(${width / 2}, ${height /2 - dayScale(d)})`}>\n                                    {text} {weekDay.includes(text) ? 'weekend' : ''}\n                                </text>\n                                <circle cx={width / 2} cy={height / 2} r={dayScale(d)} /> \n                            </g>\n                        })}\n                    </g>\n                    <g className=\"timeTick\">\n                        {[6, 9, 12, 14, 18, 22].map((d, i) => {\n                            const attr = {\n                                x1: width / 2,\n                                y1: height / 2 - radiusArr[2][0],\n                                x2: width / 2,\n                                y2: height / 2,\n                            }\n                            return (\n                                <g key={d} className='timeSplit' transform={`rotate(${anagleScale(d)})`}>\n                                    <line {...attr} />\n                                    <text x={attr.x1} y={attr.y1} dy={0}>{`${d}:00`}</text>\n                                    {/* <circle cx={attr.x1} cy={attr.y1} r={4} /> */}\n                                </g>\n                            )\n                        })}\n                    </g>\n                    <g className=\"time-classify\" transform={`translate(${width/2}, ${height / 2})`}>\n                        {timeClassifyData.map((d, i) => {\n                            const attr = {\n                                d: timePath(d.data),\n                            }\n                            const textPathHrefProps = {\n                                fill: 'none',\n                                id: `time-${i}`,\n                                d: middleArcLine({\n                                    innerRadius: radiusArr[2][1] + 10,\n                                    outerRadius: radiusArr[2][1]+10,\n                                    startAngle: d.data[0] < 0 ? \n                                        timeScale(moment(`2019-12-31 ${22}:00:00`).unix())\n                                        : timeScale(moment(`${dayStr} ${d.data[0]}:00:00`).unix()),\n                                    endAngle: timeScale(moment(`${dayStr} ${d.data[1]}:00:00`).unix()),\n                                }),\n                            }\n                            const textPathProps = {\n                                href: `#time-${i}`,\n                                startOffset: '50%',\n                                dominantBaseline: 'middle',\n                            }\n                            return (\n                                <g key={d.data[0]}>\n                                    <path {...attr} className='time-button' />\n                                    <g className='time-label' >\n                                        <path {...textPathHrefProps} />\n                                        <text>\n                                            <textPath {...textPathProps}>\n                                                {d.name}\n                                            </textPath>\n                                        </text>\n                                    </g>\n                                </g>\n                            )\n                        })}\n                    </g>\n                    <g className='consume-g' transform={`translate(${width/2}, ${height / 2})`}>\n                        {consumeData.map((d, i) => {\n                            const storeType = storeClassify.find(d1 => d1.data.includes(d.location)).type\n                            const attr = {\n                                className: 'consume-item',\n                                d: consumePath(d),\n                                fill: colorScale(storeType),\n                                fillOpacity: priceOpacity(d.price),\n                            }\n                            return (\n                                <path key={JSON.stringify(d)} {...attr} />\n                            )\n                        })}\n                    </g>\n                    <g className='first-classify' transform={`translate(${width / 2}, ${height / 2})`}>\n                        {storeClassify.map((d, i) => {\n                            const {type, data} = d\n                            const attr = {\n                                d: storeClassifyPath(d),\n                                fill: colorScale(type),\n                                stroke: colorScale(type),\n                            }\n                            const index = storeClassify.findIndex(d1 => d1.type === type)\n                            const count = chain(storeClassify)\n                                .slice(0, index)\n                                .map('data')\n                                .flatten()\n                                .value()\n                                .length\n                            const textPathHrefProps = {\n                                fill: 'none',\n                                id: `text-${type}`,\n                                d: middleArcLine({\n                                    innerRadius: radiusArr[4][0],\n                                    outerRadius: radiusArr[4][1],\n                                    startAngle: storeClassifyScale(count),\n                                    endAngle: storeClassifyScale(count + data.length),\n                                }),\n                            }\n                            const textPathProps = {\n                                href: `#text-${type}`,\n                                startOffset: '50%',\n                                dominantBaseline: 'middle',\n                            }\n                            let className = activeClassify.includes(type) ? 'active' : ''\n                            if (activeClassify.length > 0 && !activeClassify.includes(type)) {\n                                className = 'disabled'\n                            }\n                            const opacity = intersection(consumeData.map(d1 => d1.location), data).length ? 1 : 0.1;\n                            return (\n                                <g key={d.type} className={className}\n                                    opacity={opacity}\n                                    onClick={() => {\n                                        const newActiveClassisy = pushOrPop(activeClassify, type)\n                                        setActiveClassify(newActiveClassisy)\n                                        const newActiveStore = chain(storeClassify)\n                                            .filter(d1 => newActiveClassisy.includes(d1.type))\n                                            .map('data')\n                                            .flatten()\n                                            .value()\n                                        setActiveStore(newActiveStore)\n                                    }}\n                                >\n                                    <path {...attr} className='classify-button' />\n                                    <g className='classify-label'>\n                                        <path {...textPathHrefProps} />\n                                        <text>\n                                            <textPath {...textPathProps}>\n                                                {d.type}\n                                            </textPath>\n                                        </text>\n                                    </g>\n                                </g>\n                            )\n                        })}\n                    </g>\n                    <g className='detail-store' transform={`translate(${width/2}, ${height / 2})`}>\n                        {\n                        storeClassify.map((d1, j) => {\n                            const {type, data} = d1\n                            const count = chain(storeClassify)\n                                .slice(0, j)\n                                .map('data')\n                                .flatten()\n                                .value()\n                                .length\n\n                            return (\n                                <g key={`a-${type}`}>\n                                    {\n                                        data.map((d, i) => {\n                                            const attr = {\n                                                d: storePath(d),\n                                                fill: colorScale(type),\n                                                stroke: colorScale(type),\n                                                fillOpacity: locationOpacity(locationPriceObj[d]),\n                                            }\n                                            const textPathHrefProps = {\n                                                fill: 'none',\n                                                id: `text-${d}`,\n                                                d: middleArcLine({\n                                                    innerRadius: radiusArr[3][0],\n                                                    outerRadius: radiusArr[3][1],\n                                                    startAngle: storeClassifyScale(count + i),\n                                                    endAngle: storeClassifyScale(count + i + 1),\n                                                }),\n                                            }\n                                            const textPathProps = {\n                                                href: `#text-${d}`,\n                                                startOffset: '50%',\n                                                dominantBaseline: 'middle',\n                                            }\n                                            let className = activeStore.includes(d) ? 'active' : ''\n                                            if (activeStore.length > 0 && !activeStore.includes(d)) {\n                                                className = 'disabled'\n                                            }\n                                            const opacity = consumeData.map(d => d.location).includes(d) ? 1 : 0.1\n                                            return (\n                                                <g key={d} opacity={opacity} className={className} onClick={() => {\n                                                    const newActiveStore = pushOrPop(activeStore, d)\n                                                    const newType = storeClassify\n                                                        .filter(d1 => d1.data.filter(d2 => newActiveStore.includes(d2)).length)\n                                                        .map(d1 => d1.type)\n                                                    setActiveStore(newActiveStore)\n                                                    setActiveClassify(newType)\n                                                }}>\n                                                    <path {...attr} className='store-button' />\n                                                    <g className='store-label'>\n                                                        <path {...textPathHrefProps} />\n                                                        <text>\n                                                            <textPath {...textPathProps}>\n                                                                {d.split(' ').map((d1, j) => (\n                                                                    <tspan y={j * 10} key={d1}>{d1}</tspan>\n                                                                ))}\n                                                            </textPath>\n                                                        </text>\n                                                    </g>\n                                                </g>\n                                            )\n                                        })\n                                    }\n                                </g>\n                            )\n                        })}\n                    </g>\n                    <g className='customer' transform={`translate(${width/2}, ${height / 2})`}>\n                        <circle className='bg' cx={0} cy={0} r={radiusArr[1][0]}/>\n                        <g>\n                            {\n                                ccNumData.map((d, i) => {\n                                    const golden_angle = Math.PI * (3 - Math.sqrt(5))\n                                    const theta = i * golden_angle\n                                    const r = Math.sqrt(i) / Math.sqrt(ccNumData.length)\n                                    const cx = (radiusArr[1][0] - 10) * (r * Math.cos(theta))\n                                    const cy = (radiusArr[1][0] - 10) * (r * Math.sin(theta))\n                                    const opacity = consumeData.map(d1 => d1.last4ccnum).includes(d) ? 1 : 0.1\n                                    let className = activeCustom.includes(d) ? 'active' : ''\n                                    if (activeCustom.length > 0 && !activeCustom.includes(d)) {\n                                        className = 'disabled'\n                                    }\n                                    return (\n                                        <g\n                                            transform={`translate(${cx}, ${cy})`}\n                                            opacity={opacity}\n                                            onClick={() => {\n                                                const newActiveScatter = pushOrPop(activeCustom, d)\n                                                setActiveCustom(newActiveScatter)\n                                            }}\n                                        >\n                                            <circle key={d} r={5} className={`card ${className}`} />\n                                            <text>{d}</text>\n                                        </g>\n                                    )\n                                })\n                            }\n                        </g>\n                    </g>\n                    <g className='customerTrack' transform={`translate(${width/2}, ${height / 2})`}>\n                        {\n                            Object.entries(pointObj)\n                                .map(d => {\n                                    const [name, data] = d\n                                    let opacity = activeCustom.includes(name) ? 1 : 0\n                                    // let opacity = consumeData.map(d1 => d1.last4ccnum).includes(name) ? 1 : 0\n                                    if (opacity) {\n                                        opacity = showTrack ? 1 : 0\n                                    }\n                                    return (\n                                        <g opacity={opacity} key={name}>\n                                            {data.map(d1 => {\n                                                return <path d ={trackPath(d1)} key={d1.toString()} />\n                                            })}\n                                        </g>\n                                        \n                                    )\n                                })\n                        }\n                    </g>\n                </g>\n            </svg>\n            <div className='left'>\n                <div className='condition'>\n                    <div className=\"item\">\n                        select mode：\n                        {['single', 'mulitiple'].map(d => {\n                            return (\n                                <>\n                                    <label htmlFor={d}>{d}</label>\n                                    <input\n                                        type='radio'\n                                        name='select-mode'\n                                        checked={selectMode === d}\n                                        onChange={() => {\n                                            if (selectMode !== d) {\n                                                setselectMode(d)\n                                            }\n                                        }}\n                                        value={d}\n                                        id={d}\n                                    />\n                                </>\n                            )\n                        })}\n                    </div>\n                    <div className='item'>\n                        show customer track：\n                        <input\n                            type='checkbox'\n                            name='track-mode'\n                            checked={showTrack}\n                            onChange={() => {\n                                setshowTrack(!showTrack)\n                            }}\n                        />\n                    </div>\n                    <div className='item'>\n                        <button onClick={() => {\n                            setActiveStore([])\n                            setActiveClassify([])\n                            setActiveCustom([])\n                        }}>Refresh</button>\n                    </div>\n                </div>\n                <Parallel data={consumeData} />\n            </div>\n        </div>\n    )\n}\n\n\nfunction Parallel({ data = []}) {\n    const [top, right, bottom, left] = [20, 20, 20, 80]\n    const [width, height] = [600, 500] \n\n    const realHeight = height - top - bottom\n    const realWidth = width - left - right\n\n    const bgRef = useRef(null)\n    const pathRef = useRef(null)\n\n    useEffect(() => {\n        const location = chain(data).map('location').uniq().value()\n        const name = chain(data).map('last4ccnum').uniq().value()\n        const time = chain(data).map('hour').uniq().value()\n\n        const scaleObj = {\n            last4ccnum: scalePoint()\n                .domain(name)\n                .range([0, realHeight]),\n            dayStr: scalePoint()\n                .domain(timeArr.map(d => moment(d * 1000).format('MM/DD/YYYY')))\n                .range([0, realHeight]),\n            hour: scaleLinear()\n                .domain([0, 24])\n                // .domain(extent(time))\n                .range([0, realHeight]),\n            location: scalePoint()\n                .domain(location)\n                .range([0, realHeight]),\n            price: scaleLinear()\n                .domain([0, extent(data, d => Number(d.price))[1]].reverse())\n                .range([0, realHeight]),\n        }\n\n        const xScale = scalePoint()\n            .domain(Object.keys(scaleObj))\n            .range([0, realWidth])\n\n        select(bgRef.current)\n            .selectAll('g.axisx')\n            .remove()\n        select(bgRef.current)\n            .selectAll('g.axisx')\n            .data(Object.keys(scaleObj))\n            .enter()\n            .append('g')\n            .classed('axisx', true)\n            .attr('transform', d => {\n                return `translate(${xScale(d)}, ${0})`\n            })\n            .each(function append(d) {\n                const axis = axisLeft()\n                    .scale(scaleObj[d])\n                    // .tickSize(10)\n                select(this).call(axis)\n            })\n\n        const calLine = line()\n        const path = d => {\n            return calLine(\n                Object.keys(scaleObj)\n                    .map(key => [xScale(key), scaleObj[key](d[key])])\n            )\n        }\n\n        select(pathRef.current)\n            .selectAll('path')\n            .remove()\n        \n        select(pathRef.current)\n            .selectAll('path')\n            .data(data)\n            .enter()\n            .append('path')\n            .attr('d', path)\n    }, [data])\n\n    return (\n        <svg height={height} width={width} className='parallel'>\n            <g transform={`translate(${left}, ${top})`}>\n                <g ref={pathRef} className='path'/>\n                <g ref={bgRef}/>\n            </g>\n        </svg>\n    )\n}","import './App.css';\nimport ConsusePage from './consuse';\nimport FirstQ from './firstQ';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        {/* <ConsusePage /> */}\n        <FirstQ />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}