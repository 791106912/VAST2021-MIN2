{"version":3,"sources":["firstQ/data.js","firstQ/index.jsx","secondQ/index.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["timeArr","storeClassify","type","data","timeClassifyData","name","add","a","b","parseFloat","Number","toFixed","FirstQ","height","width","radiusArr","anagleScale","scaleLinear","domain","range","dayScale","extent","dayStr","useState","showTrack","setshowTrack","selectMode","setselectMode","pushOrPop","arr","d","newArr","includes","filter","d1","push","timeScale","map","moment","unix","Math","PI","consumePath","arc","innerRadius","day","outerRadius","length","startAngle","time","endAngle","originCCdata","setOriginCCdata","activeStore","setActiveStore","activeClassify","setActiveClassify","activeCustom","setActiveCustom","consumeData","useMemo","location","last4ccnum","ccNumData","setccNumData","exitCCArr","chain","uniq","value","priceOpacity","extents","price","useEffect","cc","Promise","resolve","csv","then","res","console","log","newConsumeData","timestamp","split","dayStrs","hourStr","locationType","find","hour","newLoy","loy","all","locationPriceObj","reduce","obj","num","newNum","locationOpacity","Object","values","storeArr","flatten","storeClassifyScale","storeClassifyPath","index","findIndex","count","slice","padAngle","cornerRadius","storePath","indexOf","timePath","middleArcLine","angles","r1","max","middleAngle","invertDirection","reverse","pathFun","path","toString","colorScale","scaleOrdinal","sort","ascending","schemeCategory10","pointObj","thisData","key","centroid","activeTimeData","replace","trackPath","line","x","y","curve","curveCatmullRom","alpha","weekDay","className","transform","i","text","format","textOpactiy","opacity","cx","cy","r","attr","x1","y1","x2","y2","dy","textPathHrefProps","fill","id","textPathProps","href","startOffset","dominantBaseline","storeType","fillOpacity","JSON","stringify","stroke","intersection","onClick","newActiveClassisy","newActiveStore","j","textAnchor","middle","isBottom","textData","newType","d2","theta","sqrt","cos","sin","thisConsumeData","arcData","total","t","thisAngleScale","thisArcFun","startValue","endValue","newActiveScatter","entries","htmlFor","checked","onChange","Parallel","realHeight","bgRef","useRef","pathRef","scaleObj","scalePoint","xScale","keys","select","current","selectAll","remove","enter","append","classed","each","axis","axisLeft","scale","this","call","calLine","ref","SecondQ","mapRef","setmap","allTrack","setAllTrack","projection","geoAlbers","json","fitSize","features","carGeo","src","alt","geoPath","Content","children","App","to","from","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.11a81372.chunk.js","sourcesContent":["export const timeArr = [\n    1388937600\n  , 1389024000\n  , 1389110400\n  , 1389196800\n  , 1389283200\n  , 1389369600\n  , 1389456000\n  , 1389542400\n  , 1389628800\n  , 1389715200\n  , 1389801600\n  , 1389888000\n  , 1389974400\n  , 1390060800]\n\nexport const storeClassify = [\n    {\n        type: 'restaurant',\n        data: [\n            \"Brew've Been Served\",\n            'Hallowed Grounds',\n            'Coffee Cameleon',\n            'Coffee Shack',\n            'Bean There Done That',\n            \"Jack's Magical Beans\",\n            'Brewed Awakenings',\n            'Katerinas Caf',\n            'Gelatogalore',\n            'Ouzeri Elian',\n            'Kalami Kafenion',\n            'Hippokampos',\n            'Abila Zacharo',\n            \"Guy's Gyros\",\n        ],\n    },\n    {\n        type: 'parter',\n        data: [\n            'Abila Airport',\n            'Nationwide Refinery',\n            'Maximum Iron and Steel',\n            'Carlyle Chemical Inc.',\n            'Abila Scrapyard',\n            \"Octavio's Office Supplies\",\n            'Chostus Hotel',\n            \"Frank's Fuel\",\n            'Kronos Pipe and Irrigation',\n            'Stewart and Sons Fabrication',\n        ],\n    },\n    {\n        type: 'shop',\n        data: [\n            \"Albert's Fine Clothing\",\n            'Kronos Mart',\n            'Daily Dealz',\n            \"Shoppers' Delight\",\n            'Ahaggo Museum',\n        ],\n    },\n    {\n        type: 'entertainment',\n        data: [\n            \"Desafio Golf Course\",\n            'Roberts and Sons',\n        ],\n    },\n    {\n        type: 'other',\n        data: [\n            'U-Pump',\n            'General Grocer',\n            \"Frydos Autosupply n' More\",\n        ]\n    }\n]\n\nexport const timeClassifyData = [\n    {\n        data: [-2, 6],\n        name: 'Sleeping',\n    },\n    {\n        data: [6, 9],\n        name: 'On the way to work',\n    },\n    {\n        data: [9, 12],\n        name: 'Working',\n    },\n    {\n        data: [12, 14],\n        name: 'Lunch Break',\n    },\n    {\n        data: [14, 18],\n        name: 'Working',\n    },\n    {\n        data: [18, 22],\n        name: 'After work',\n    }\n]\n\n// export const customeData","import { ascending, extent } from 'd3-array'\nimport { csv } from 'd3-fetch'\nimport { path } from 'd3-path'\nimport { axisLeft, scaleLinear, scaleOrdinal, scalePoint, schemeCategory10, select } from 'd3'\nimport { arc, curveCatmullRom, line } from 'd3-shape'\nimport { chain, intersection } from 'lodash'\nimport moment from 'moment'\nimport React, { useEffect, useMemo, useRef, useState } from 'react'\nimport { storeClassify, timeArr, timeClassifyData } from './data'\nimport './index.scss'\n\n\nfunction add(a, b) {\n    return parseFloat((Number(a) + Number(b)).toFixed(10))\n}\nexport default function FirstQ() {\n    const [height, width] = [800, 800]\n\n    const [top, right, bottom, left] = [10,10,10,10]\n\n    const realHeight = height - top - bottom\n    const realWidth = width - left - right\n\n    const radiusArr = [\n        [0, 120], // card\n        [120, 240], // timeCircle\n        [370, 371], // timeLabel\n        [270, 300], // store\n        [320, 350], // classify\n    ]\n\n\n    const anagleScale = scaleLinear()\n        .domain([0, 24])\n        .range([0, 360])\n\n    const dayScale = scaleLinear()\n        .domain(extent(timeArr))\n        .range([radiusArr[1][0], radiusArr[1][1]])\n\n    const dayStr = '2020-01-01'\n\n    // 是否展示track \n    const [showTrack, setshowTrack] = useState(true)\n\n    // 选中模式\n    const [selectMode, setselectMode] = useState('mulitiple')\n\n    function pushOrPop(arr, d) {\n        const newArr = [...arr]\n        if (selectMode !== 'single') {\n            if (newArr.includes(d)) {\n                return newArr.filter(d1 => d1 !== d)\n            }\n            newArr.push(d)\n            return newArr\n        } else {\n            if (newArr.includes(d)) {\n                return []\n            } else {\n                return [d]\n            }\n        }\n    }\n\n    const timeScale = scaleLinear()\n        .domain([`${dayStr} 00:00:00`, `${dayStr} 23:59:59`].map(d => moment(d).unix()))\n        .range([0, Math.PI * 2])\n\n    const consumePath = arc()\n        .innerRadius(d => dayScale(d.day))\n        .outerRadius(d => dayScale(d.day) + (radiusArr[1][1] - radiusArr[1][0]) / timeArr.length )\n        .startAngle(d => {\n            // console.log(d.ti)\n            return timeScale(d.time)\n        })\n        .endAngle(d => timeScale(d.time + 500))\n\n    // getData\n    const [originCCdata, setOriginCCdata] = useState([])\n\n    // 选中\n    const [activeStore, setActiveStore] = useState([])\n    const [activeClassify, setActiveClassify] = useState([])\n    const [activeCustom, setActiveCustom] = useState([])\n\n    const consumeData = useMemo(() => {\n        return originCCdata\n        .filter(d => activeStore.length ? activeStore.includes(d.location) : true)\n        .filter(d => activeCustom.length ? activeCustom.includes(d.last4ccnum) : true)\n    }, [activeStore, originCCdata, activeCustom])\n    const [ccNumData, setccNumData] = useState([])\n\n    const exitCCArr = useMemo(() => {\n        return chain(consumeData)\n            .map('last4ccnum')\n            .uniq()\n            .value()\n    }, [consumeData])\n\n    const priceOpacity = useMemo(() => {\n        const extents = extent(consumeData, d => Number(d.price))\n        return scaleLinear()\n        .domain(extents)\n        .range([0.2, 1])\n    }, [consumeData])\n\n    useEffect(() => {\n        const cc  = new Promise(resolve => {\n            csv('./data/cc_data.csv').then(res => {\n                console.log(res)\n                const newConsumeData = res.map(d => {\n                    const [dayStrs, hourStr] = d.timestamp.split(' ')\n                    const day = moment(dayStrs).unix()\n                    const time = moment(`${dayStr} ${hourStr}:00`).unix()\n                    const locationType = storeClassify.find(d1 => d1.data.includes(d.location)).type\n                    // 时间有点不准确\n                    return {\n                        ...d,\n                        day,\n                        dayStr: dayStrs,\n                        time,\n                        locationType,\n                        hour: hourStr.split(':')[0],\n                    }\n                })\n                const newLoy = chain(res).map('last4ccnum').uniq().value()\n                setccNumData(newLoy)\n                setOriginCCdata(newConsumeData)\n                resolve(res)\n            })\n        })\n        const loy = new Promise(resolve => {\n            csv('./data/loyalty_data.csv').then(res => {\n                resolve(res)\n            })\n        })\n        Promise.all([cc, loy]).then(res => {\n            // draw(res)\n            // calcualteTimeData(res[0])\n            // calculateLocationData(res[0], res[1])\n        })\n    }, [])\n\n    const locationPriceObj = useMemo(() => {\n        return consumeData.reduce((obj, d) => {\n            const num = obj[d.location] || 0\n            const newNum = parseFloat((num + Number(d.price)).toFixed(10))\n            obj[d.location] = newNum\n            return obj\n        }, {})\n    }, [consumeData])\n\n    const locationOpacity = useMemo(() => {\n        const extents = extent(Object.values(locationPriceObj))\n        return scaleLinear()\n        .domain(extents)\n        .range([0.2, 1])\n    }, [locationPriceObj])\n    \n    // store\n    const storeArr = chain(storeClassify)\n        .map('data')\n        .flatten()\n        .value()\n    const storeClassifyScale = scaleLinear()\n        .domain([0, storeArr.length])\n        .range([0, Math.PI * 2])\n\n    const storeClassifyPath = arc()\n        .innerRadius(d => radiusArr[4][0])\n        .outerRadius(d => radiusArr[4][1])\n        .startAngle(d => {\n            const {type} = d\n            const index = storeClassify.findIndex(d => d.type === type)\n            const count = chain(storeClassify)\n                .slice(0, index)\n                .map('data')\n                .flatten()\n                .value()\n                .length\n\n            return storeClassifyScale(count)\n        })\n        .endAngle(d => {\n            const {type} = d\n            const index = storeClassify.findIndex(d => d.type === type)\n            const count = chain(storeClassify)\n                .slice(0, index + 1)\n                .map('data')\n                .flatten()\n                .value()\n                .length\n            return storeClassifyScale(count)\n        })\n        .padAngle(.01)\n        .cornerRadius(4)\n\n    const storePath = arc()\n        .innerRadius(d => radiusArr[3][0])\n        .outerRadius(d => radiusArr[3][1])\n        .startAngle(d => {\n            const index = storeArr.indexOf(d)\n            return storeClassifyScale(index)\n        })\n        .endAngle(d => {\n            const index = storeArr.indexOf(d)\n            return storeClassifyScale(index + 1)\n        })\n        .padAngle(.01)\n        .cornerRadius(4)\n\n    const timePath = arc()\n        .innerRadius(d => radiusArr[2][0])\n        .outerRadius(d => radiusArr[2][1])\n        .startAngle(d => {\n            if(d[0]<0) {\n                return timeScale(moment(`2019-12-31 ${22}:00:00`).unix())\n            }\n            return timeScale(moment(`${dayStr} ${d[0]}:00:00`).unix())\n        })\n        .endAngle(d => timeScale(moment(`${dayStr} ${d[1]}:00:00`).unix()))\n        .padAngle(.1)\n        .cornerRadius(4)\n\n    const middleArcLine = d => {\n        if (!d.innerRadius || !d.outerRadius) {\n            return ''\n        }\n        const angles = [d.startAngle, d.endAngle].map(\n            d1 => d1 - Math.PI / 2\n        )\n        const r1 = Math.max(0, (d.outerRadius + d.innerRadius) / 2)\n        const middleAngle = (angles[1] + angles[0]) / 2\n        const invertDirection = middleAngle > 0 && middleAngle < Math.PI\n        if (invertDirection) angles.reverse()\n        const pathFun = path()\n        pathFun.arc(0, 0, r1, angles[0], angles[1], invertDirection)\n        return pathFun.toString()\n    }\n\n    const colorScale = scaleOrdinal(storeClassify.map(d => d.type).sort(ascending), schemeCategory10)\n    const pointObj = useMemo(() => {\n        return ccNumData.reduce((obj, d) => {\n            const thisData = chain(consumeData)\n                .filter(d1 => d1.last4ccnum === d)\n                .reduce((obj, d1) => {\n                    const key = d1.dayStr\n                    if (!obj[key]) obj[key] = []\n                    obj[key].push(consumePath.centroid(d1))\n                    return obj\n                }, {})\n                .values()\n                .value()\n            obj[d] = thisData\n            return obj\n        }, {})\n    }, [ccNumData, consumeData, consumePath])\n\n    const activeTimeData = useMemo(() => {\n        return chain(consumeData)\n            .map(d => d.dayStr.replace('/2014', ''))\n            .uniq()\n            .value()\n    }, [consumeData])\n\n    const trackPath = line()\n        .x(d => d[0])\n        .y(d => d[1])\n        .curve(curveCatmullRom.alpha(0.5));\n\n    const weekDay = ['01/11', '01/12', '01/18', '01/19']\n    return (\n        <div className='graph'>\n            <svg height={height} width={width} className='main'>\n                <g transform={`translate(${left}, ${top})`}>\n                    <g className=\"timebg\">\n                        {timeArr.map((d, i) => {\n                            const text = moment(d * 1000).format('MM/DD')\n                            const textOpactiy = activeTimeData.includes(text) ? 1 : 0\n                            return <g key={d}>\n                                <text opacity={textOpactiy} transform={`translate(${width / 2}, ${height /2 - dayScale(d)})`}>\n                                    {text} {weekDay.includes(text) ? 'weekend' : ''}\n                                </text>\n                                <circle cx={width / 2} cy={height / 2} r={dayScale(d)} /> \n                            </g>\n                        })}\n                    </g>\n                    <g className=\"timeTick\">\n                        {[6, 9, 12, 14, 18, 22].map((d, i) => {\n                            const attr = {\n                                x1: width / 2,\n                                y1: height / 2 - radiusArr[2][0],\n                                x2: width / 2,\n                                y2: height / 2,\n                            }\n                            return (\n                                <g key={d} className='timeSplit' transform={`rotate(${anagleScale(d)})`}>\n                                    <line {...attr} />\n                                    <text x={attr.x1} y={attr.y1} dy={0}>{`${d}:00`}</text>\n                                    {/* <circle cx={attr.x1} cy={attr.y1} r={4} /> */}\n                                </g>\n                            )\n                        })}\n                    </g>\n                    <g className=\"time-classify\" transform={`translate(${width/2}, ${height / 2})`}>\n                        {timeClassifyData.map((d, i) => {\n                            const attr = {\n                                d: timePath(d.data),\n                            }\n                            const textPathHrefProps = {\n                                fill: 'none',\n                                id: `time-${i}`,\n                                d: middleArcLine({\n                                    innerRadius: radiusArr[2][1] + 10,\n                                    outerRadius: radiusArr[2][1]+10,\n                                    startAngle: d.data[0] < 0 ? \n                                        timeScale(moment(`2019-12-31 ${22}:00:00`).unix())\n                                        : timeScale(moment(`${dayStr} ${d.data[0]}:00:00`).unix()),\n                                    endAngle: timeScale(moment(`${dayStr} ${d.data[1]}:00:00`).unix()),\n                                }),\n                            }\n                            const textPathProps = {\n                                href: `#time-${i}`,\n                                startOffset: '50%',\n                                dominantBaseline: 'middle',\n                            }\n                            return (\n                                <g key={d.data[0]}>\n                                    <path {...attr} className='time-button' />\n                                    <g className='time-label' >\n                                        <path {...textPathHrefProps} />\n                                        <text>\n                                            <textPath {...textPathProps}>\n                                                {d.name}\n                                            </textPath>\n                                        </text>\n                                    </g>\n                                </g>\n                            )\n                        })}\n                    </g>\n                    <g className='consume-g' transform={`translate(${width/2}, ${height / 2})`}>\n                        {consumeData.map((d, i) => {\n                            const storeType = storeClassify.find(d1 => d1.data.includes(d.location)).type\n                            const attr = {\n                                className: 'consume-item',\n                                d: consumePath(d),\n                                fill: colorScale(storeType),\n                                fillOpacity: priceOpacity(d.price),\n                            }\n                            return (\n                                <path key={JSON.stringify(d)} {...attr} />\n                            )\n                        })}\n                    </g>\n                    <g className='first-classify' transform={`translate(${width / 2}, ${height / 2})`}>\n                        {storeClassify.map((d, i) => {\n                            const {type, data} = d\n                            const attr = {\n                                d: storeClassifyPath(d),\n                                fill: colorScale(type),\n                                stroke: colorScale(type),\n                            }\n                            const index = storeClassify.findIndex(d1 => d1.type === type)\n                            const count = chain(storeClassify)\n                                .slice(0, index)\n                                .map('data')\n                                .flatten()\n                                .value()\n                                .length\n                            const textPathHrefProps = {\n                                fill: 'none',\n                                id: `text-${type}`,\n                                d: middleArcLine({\n                                    innerRadius: radiusArr[4][0],\n                                    outerRadius: radiusArr[4][1],\n                                    startAngle: storeClassifyScale(count),\n                                    endAngle: storeClassifyScale(count + data.length),\n                                }),\n                            }\n                            const textPathProps = {\n                                href: `#text-${type}`,\n                                startOffset: '50%',\n                                dominantBaseline: 'middle',\n                            }\n                            let className = activeClassify.includes(type) ? 'active' : ''\n                            if (activeClassify.length > 0 && !activeClassify.includes(type)) {\n                                className = 'disabled'\n                            }\n                            const opacity = intersection(consumeData.map(d1 => d1.location), data).length ? 1 : 0.1;\n                            return (\n                                <g key={d.type} className={className}\n                                    opacity={opacity}\n                                    onClick={() => {\n                                        const newActiveClassisy = pushOrPop(activeClassify, type)\n                                        setActiveClassify(newActiveClassisy)\n                                        const newActiveStore = chain(storeClassify)\n                                            .filter(d1 => newActiveClassisy.includes(d1.type))\n                                            .map('data')\n                                            .flatten()\n                                            .value()\n                                        setActiveStore(newActiveStore)\n                                    }}\n                                >\n                                    <path {...attr} className='classify-button' />\n                                    <g className='classify-label'>\n                                        <path {...textPathHrefProps} />\n                                        <text>\n                                            <textPath {...textPathProps}>\n                                                {d.type}\n                                            </textPath>\n                                        </text>\n                                    </g>\n                                </g>\n                            )\n                        })}\n                    </g>\n                    <g className='detail-store' transform={`translate(${width/2}, ${height / 2})`}>\n                        {\n                        storeClassify.map((d1, j) => {\n                            const {type, data} = d1\n                            const count = chain(storeClassify)\n                                .slice(0, j)\n                                .map('data')\n                                .flatten()\n                                .value()\n                                .length\n\n                            return (\n                                <g key={`a-${type}`}>\n                                    {\n                                        data.map((d, i) => {\n                                            const attr = {\n                                                d: storePath(d),\n                                                fill: colorScale(type),\n                                                stroke: colorScale(type),\n                                                fillOpacity: locationOpacity(locationPriceObj[d]),\n                                            }\n                                            const startAngle = storeClassifyScale(count + i)\n                                            const endAngle = storeClassifyScale(count + i + 1)\n                                            const textPathHrefProps = {\n                                                fill: 'none',\n                                                id: `text-${d}`,\n                                                d: middleArcLine({\n                                                    innerRadius: radiusArr[3][1],\n                                                    outerRadius: radiusArr[3][1],\n                                                    startAngle,\n                                                    endAngle,\n                                                }),\n                                            }\n                                            const textPathProps = {\n                                                href: `#text-${d}`,\n                                                startOffset: '50%',\n                                                dominantBaseline: 'middle',\n                                                textAnchor: 'middle',\n                                            }\n                                            let className = activeStore.includes(d) ? 'active' : ''\n                                            if (activeStore.length > 0 && !activeStore.includes(d)) {\n                                                className = 'disabled'\n                                            }\n                                            const opacity = consumeData.map(d => d.location).includes(d) ? 1 : 0.1\n                                            const middle = (startAngle + endAngle) / 2\n                                            const isBottom = middle > Math.PI / 2 && middle < Math.PI / 2 * 3\n                                            const textData = isBottom ? d.split(' ').reverse() : d.split(' ')\n                                            const dy = isBottom ? -10 : 10\n                                            return (\n                                                <g key={d} opacity={opacity} className={className} onClick={() => {\n                                                    const newActiveStore = pushOrPop(activeStore, d)\n                                                    const newType = storeClassify\n                                                        .filter(d1 => d1.data.filter(d2 => newActiveStore.includes(d2)).length)\n                                                        .map(d1 => d1.type)\n                                                    setActiveStore(newActiveStore)\n                                                    setActiveClassify(newType)\n                                                }}>\n                                                    <path {...attr} className='store-button' />\n                                                    <g className='store-label'>\n                                                        <path {...textPathHrefProps} />\n                                                        <text>\n                                                            {\n                                                                textData.map((d1, j) => (\n                                                                    <textPath {...textPathProps} key={d1}>\n                                                                        <tspan dy={dy}>{d1}</tspan>\n                                                                    </textPath>\n                                                                ))\n                                                            }\n                                                        </text>\n                                                    </g>\n                                                </g>\n                                            )\n                                        })\n                                    }\n                                </g>\n                            )\n                        })}\n                    </g>\n                    <g className='customer' transform={`translate(${width/2}, ${height / 2})`}>\n                        <circle className='bg' cx={0} cy={0} r={radiusArr[1][0]}/>\n                        <g>\n                            {\n                                ccNumData.map((d, i) => {\n                                    const golden_angle = Math.PI * (3 - Math.sqrt(5))\n                                    const theta = i * golden_angle\n                                    const r = Math.sqrt(i) / Math.sqrt(ccNumData.length)\n                                    const cx = (radiusArr[1][0] - 10) * (r * Math.cos(theta))\n                                    const cy = (radiusArr[1][0] - 10) * (r * Math.sin(theta))\n                                    const opacity = exitCCArr.includes(d) ? 1 : 0.1\n                                    let className = activeCustom.includes(d) ? 'active' : ''\n                                    if (activeCustom.length > 0 && !activeCustom.includes(d)) {\n                                        className = 'disabled'\n                                    }\n                                    const thisConsumeData = originCCdata.filter(d1 => d1.last4ccnum === d)\n                                    const arcData = chain(thisConsumeData)\n                                        .reduce((obj, d1) => {\n                                            obj[d1.locationType] = {\n                                                value: obj[d1.locationType]\n                                                ? add(obj[d1.locationType].value, d1.price)\n                                                : Number(d1.price),\n                                                type: d1.locationType,\n                                            }\n                                            return obj\n                                        }, {})\n                                        .values()\n                                        // .flatten()\n                                        .value()\n                                    // console.log(arcData)\n                                    const total = thisConsumeData.reduce((t, d1) => add(t, d1.price), 0)\n                                    // console.log(total)\n                                    const thisAngleScale = scaleLinear()\n                                        .domain([0, total])\n                                        .range([0, 2 * Math.PI])\n                                    const thisArcFun = arc()\n                                        .innerRadius(0)\n                                        .outerRadius(5)\n                                        .startAngle(d1 => {\n                                            const index = arcData.findIndex(d2 => d2.type === d1.type)\n                                            const startValue = chain(arcData)\n                                                .slice(0, index)\n                                                .map('value')\n                                                .reduce((t, d2) => add(t, d2), 0)\n                                                .value()\n                                            return thisAngleScale(startValue)\n                                        })\n                                        .endAngle(d1 => {\n                                            const index = arcData.findIndex(d2 => d2.type === d1.type)\n                                            const endValue = chain(arcData)\n                                                .slice(0, index)\n                                                .map('value')\n                                                .reduce((t, d2) => add(t, d2), 0)\n                                                .value() + d1.value\n                                            return thisAngleScale(endValue)\n                                        })\n                                    // console.log(thisArcFun(arcData[0]))\n                                    return (\n                                        <g\n                                            transform={`translate(${cx}, ${cy})`}\n                                            opacity={opacity}\n                                            onClick={() => {\n                                                const newActiveScatter = pushOrPop(activeCustom, d)\n                                                setActiveCustom(newActiveScatter)\n                                            }}\n                                        >\n                                            {\n                                                arcData.map(d1 => {\n                                                    const attr = {\n                                                        d: thisArcFun(d1),\n                                                        key: `small-${d1.type}`,\n                                                        fill: colorScale(d1.type),\n                                                        stroke: colorScale(d1.type),\n                                                        fillOpacity: .3,\n                                                    }\n                                                    return <path {...attr}/>\n                                                })\n                                            }\n                                            {/* <circle key={d} r={5} className={`card ${className}`} /> */}\n                                            <text\n                                                dy={-8}\n                                                // opacity={activeCustom.includes(d) ? 1: 0}\n                                            >\n                                                {d}\n                                            </text>\n                                        </g>\n                                    )\n                                })\n                            }\n                        </g>\n                    </g>\n                    <g className='customerTrack' transform={`translate(${width/2}, ${height / 2})`}>\n                        {\n                            Object.entries(pointObj)\n                                .map(d => {\n                                    const [name, data] = d\n                                    let opacity = activeCustom.includes(name) ? 1 : 0\n                                    // let opacity = consumeData.map(d1 => d1.last4ccnum).includes(name) ? 1 : 0\n                                    if (opacity) {\n                                        opacity = showTrack ? 1 : 0\n                                    }\n                                    return (\n                                        <g opacity={opacity} key={name}>\n                                            {data.map(d1 => {\n                                                return <path d ={trackPath(d1)} key={d1.toString()} />\n                                            })}\n                                        </g>\n                                        \n                                    )\n                                })\n                        }\n                    </g>\n                </g>\n            </svg>\n            <div className='left'>\n                <div className='condition'>\n                    <div className=\"item\">\n                        select mode：\n                        {['single', 'mulitiple'].map(d => {\n                            return (\n                                <>\n                                    <label htmlFor={d}>{d}</label>\n                                    <input\n                                        type='radio'\n                                        name='select-mode'\n                                        checked={selectMode === d}\n                                        onChange={() => {\n                                            if (selectMode !== d) {\n                                                setselectMode(d)\n                                            }\n                                        }}\n                                        value={d}\n                                        id={d}\n                                    />\n                                </>\n                            )\n                        })}\n                    </div>\n                    <div className='item'>\n                        show customer track：\n                        <input\n                            type='checkbox'\n                            name='track-mode'\n                            checked={showTrack}\n                            onChange={() => {\n                                setshowTrack(!showTrack)\n                            }}\n                        />\n                    </div>\n                    <div className='item'>\n                        <button onClick={() => {\n                            setActiveStore([])\n                            setActiveClassify([])\n                            setActiveCustom([])\n                        }}>Refresh</button>\n                    </div>\n                </div>\n                <Parallel data={consumeData} colorScale={colorScale} />\n            </div>\n        </div>\n    )\n}\n\n\nfunction Parallel({ data = [], colorScale}) {\n    const [top, right, bottom, left] = [20, 20, 20, 80]\n    const [width, height] = [600, 500] \n\n    const realHeight = height - top - bottom\n    const realWidth = width - left - right\n\n    const bgRef = useRef(null)\n    const pathRef = useRef(null)\n\n    useEffect(() => {\n        const location = chain(data).map('location').uniq().value()\n        const name = chain(data).map('last4ccnum').uniq().value()\n        const time = chain(data).map('hour').uniq().value()\n\n        const scaleObj = {\n            last4ccnum: scalePoint()\n                .domain(name)\n                .range([0, realHeight]),\n            dayStr: scalePoint()\n                .domain(timeArr.map(d => moment(d * 1000).format('MM/DD/YYYY')))\n                .range([0, realHeight]),\n            hour: scaleLinear()\n                .domain([0, 24])\n                // .domain(extent(time))\n                .range([0, realHeight]),\n            location: scalePoint()\n                .domain(location)\n                .range([0, realHeight]),\n            price: scaleLinear()\n                .domain([0, extent(data, d => Number(d.price))[1]].reverse())\n                .range([0, realHeight]),\n        }\n\n        const xScale = scalePoint()\n            .domain(Object.keys(scaleObj))\n            .range([0, realWidth])\n\n        select(bgRef.current)\n            .selectAll('g.axisx')\n            .remove()\n        select(bgRef.current)\n            .selectAll('g.axisx')\n            .data(Object.keys(scaleObj))\n            .enter()\n            .append('g')\n            .classed('axisx', true)\n            .attr('transform', d => {\n                return `translate(${xScale(d)}, ${0})`\n            })\n            .each(function append(d) {\n                const axis = axisLeft()\n                    .scale(scaleObj[d])\n                    // .tickSize(10)\n                select(this).call(axis)\n            })\n\n        const calLine = line()\n        const path = d => {\n            return calLine(\n                Object.keys(scaleObj)\n                    .map(key => [xScale(key), scaleObj[key](d[key])])\n            )\n        }\n\n        select(pathRef.current)\n            .selectAll('path')\n            .remove()\n        \n        select(pathRef.current)\n            .selectAll('path')\n            .data(data)\n            .enter()\n            .append('path')\n            .attr('d', path)\n            .attr('stroke', d => {\n                const { location } = d\n                const type = storeClassify.find(d1 => d1.data.includes(location)).type\n                return colorScale(type)\n            })\n    }, [data])\n\n    return (\n        <svg height={height} width={width} className='parallel'>\n            <g transform={`translate(${left}, ${top})`}>\n                <g ref={pathRef} className='path'/>\n                <g ref={bgRef}/>\n            </g>\n        </svg>\n    )\n}","import { ascending } from 'd3-array'\nimport { csv, json } from 'd3-fetch'\nimport { geoAlbers, geoPath } from 'd3-geo'\nimport { scaleOrdinal } from 'd3-scale'\nimport { line, schemeCategory10 } from 'd3'\nimport { select } from 'd3-selection'\nimport { chain } from 'lodash'\nimport React, { useEffect, useMemo, useRef, useState } from 'react'\nimport './index.scss'\n\nexport default function SecondQ() {\n    const [ width, height ] = [1000, 800]\n    const mapRef = useRef(null)\n    const trackRef = useRef(null)\n\n    const [map, setmap] = useState([])\n    const [allTrack, setAllTrack] = useState([])\n\n    const projection = useMemo(() => geoAlbers(), [])\n    const colorScale = useMemo(() => \n        scaleOrdinal()\n            .domain(allTrack.map(d => d.id))\n            .range(schemeCategory10)\n    ,[allTrack])\n\n    useEffect(() => {\n        json('./data/map.json').then(res => {\n            projection.fitSize([width + 100, height + 60], res)\n            setmap(res.features)\n        })\n        csv('./data/gps.csv').then(res => {\n            const carGeo = chain(res)\n                .reduce((obj, d) => {\n                    const {id} = d\n                    const data = obj[id] ? obj[id].data : []\n                    data.push(d)\n                    obj[id] = {\n                        id,\n                        data,\n                    }\n                    return obj\n                }, {})\n                .values()\n                .value()\n            setAllTrack(carGeo)\n        })\n    }, [])\n    return (\n        <div className='second-graph'>\n            <img src='./data/bg.jpeg' className='realMap' alt='map' />\n            <svg height={height} width={width}>\n                <g className=\"bg\">\n                    <g className=\"map\" ref={mapRef}>\n                        {map.map((d, i) => (\n                            <path key={i} className='map-item' d={geoPath(projection)(d)}/>\n                        ))}\n                    </g>\n                    {/* <g className=\"track\" ref={trackRef}>\n                        {allTrack.map(d => {\n                            const { id, data } = d\n                            const geoArr = data.map(d1 => projection([d1.long, d1.lat]))\n                            const attr = {\n                                key: id,\n                                stroke: colorScale(id),\n                                d: line()(geoArr),\n                                className: 'trackItem',\n                            }\n                            return (\n                                <path {...attr} />\n                            )\n                        })}\n                    </g> */}\n                </g>\n            </svg>\n        </div>\n    )\n}\n","import { HashRouter as Router, Link, Redirect, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport ConsusePage from './consuse';\nimport FirstQ from './firstQ';\nimport SecondQ from './secondQ';\n\nfunction Content({children}) {\n  return <div>\n    {children}\n  </div>\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        {/* <ConsusePage /> */}\n        <div className='nav'>\n            <Link to=\"/first\">first Q</Link>\n            <Link to=\"/map\">map</Link>\n        </div>\n        <Content>\n          <Switch>\n            <Route path=\"/first\">\n              <FirstQ />\n            </Route>\n            <Route path=\"/map\">\n              <SecondQ />\n            </Route>\n            <Redirect from='/' to='/first' />\n          </Switch>\n        </Content>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}